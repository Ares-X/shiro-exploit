from Crypto.Cipher import AES
import base64,uuid,sys
import binascii
import hashlib

key="kPH+bIxk5D2deZiIxcaaaA=="
de="rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBzcgAXamF2YS51dGlsLkxpbmtlZEhhc2hNYXA0wE5cEGzA+wIAAVoAC2FjY2Vzc09yZGVyeHIAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAF0AC5jb20uamVlY21zLmNvcmUuc2VjdXJpdHkuQ21zQXV0aG9yaXppbmdSZWFsbV8wc3IAF2phdmEudXRpbC5MaW5rZWRIYXNoU2V02GzXWpXdKh4CAAB4cgARamF2YS51dGlsLkhhc2hTZXS6RIWVlri3NAMAAHhwdwwAAAAQP0AAAAAAAAF0AAVhZG1pbnh4AHcBAXEAfgAFeA=="
def cmd5(src):
    m = hashlib.md5()
    m.update(src)
    return m.hexdigest()

def encode(p):
    global key
    BS   = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    print (pad(b"\x01\x01\x01"))
    mode =  AES.MODE_CBC
    iv   =  uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    file_body=pad(base64.b64decode(p))
    # print ("iv")
    # print (iv)
    #print (file_body)
    print (base64.b64decode(p))
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body)) 
    print (base64_ciphertext)

def decode(s):
    global key
    BS   = AES.block_size
    unpad = lambda s : s[0:-(s[-1])]
    mode =  AES.MODE_CBC
    cipher=base64.b64decode(s)
    print (len(cipher))
    iv=cipher[0:16]
    enc=cipher[16:]
    # print (b"\x8ez\xad8\xb2[A\xba\x97\x08S\x95\x0f\xb6\xb6l")
    # print ("de iv:")
    # print (iv)
    # print (len(enc))
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    plaintext=encryptor.decrypt(enc)
    #base64_plaintext = base64.b64encode(unpad(encryptor.encrypt(enc))) 
    print(plaintext)
    print ("\n\n\n")
    print (base64.b64encode(unpad(plaintext)).decode())

    print ("\n")
    #print (cmd5(plaintext))
    #print (unpad(plaintext))

    #print (check)


decode(de2)

